[{"code":"#include <stdio.h>\r\n#include <string.h>\r\n#include <stdlib.h>\r\n\r\nchar* longestPalindrome(char* s) {\r\n    int n = strlen(s);\r\n    if (n < 1) return \"\";\r\n\r\n    int start = 0;\r\n    int maxLen = 1;\r\n    int i, j;\r\n\r\n    // Allocate 2D array properly\r\n    int** dp = (int**)malloc(n * sizeof(int*));\r\n    for (i = 0; i < n; i++) {\r\n        dp[i] = (int*)malloc(n * sizeof(int));\r\n        memset(dp[i], 0, n * sizeof(int));\r\n    }\r\n\r\n    // Substrings of length 1 are palindromes\r\n    for (i = 0; i < n; i++) {\r\n        dp[i][i] = 1;\r\n    }\r\n\r\n    // Substrings of length 2\r\n    for (i = 0; i < n - 1; i++) {\r\n        if (s[i] == s[i + 1]) {\r\n            dp[i][i + 1] = 1;\r\n            start = i;\r\n            maxLen = 2;\r\n        }\r\n    }\r\n\r\n    // Substrings longer than 2\r\n    for (int k = 3; k <= n; k++) {\r\n        for (i = 0; i < n - k + 1; i++) {\r\n            j = i + k - 1;\r\n            if (s[i] == s[j] && dp[i + 1][j - 1]) {\r\n                dp[i][j] = 1;\r\n                if (k > maxLen) {\r\n                    start = i;\r\n                    maxLen = k;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Copy result\r\n    char* result = (char*)malloc((maxLen + 1) * sizeof(char));\r\n    strncpy(result, s + start, maxLen);\r\n    result[maxLen] = '\\0';\r\n\r\n    // Free memory\r\n    for (i = 0; i < n; i++) {\r\n        free(dp[i]);\r\n    }\r\n    free(dp);\r\n\r\n    return result;\r\n}\r\n\r\nint main() {\r\n    char s[1000];\r\n    fgets(s, sizeof(s), stdin);\r\n    s[strcspn(s, \"\\n\")] = 0;\r\n\r\n    char* result = longestPalindrome(s);\r\n    printf(\"%s\", result);\r\n    free(result);\r\n\r\n    return 0;\r\n}\r\n","language":"c","time":"2025-07-16T17:31:32.497Z","isCorrect":true}]