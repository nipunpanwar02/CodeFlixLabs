[{"code":"int findUnsortedSubarray(int arr[], int n) {\r\n    int left = 0, right = n - 1;\r\n\r\n    // Find the left boundary of the unsorted subarray\r\n    while (left < n - 1 && arr[left] <= arr[left + 1]) {\r\n        left++;\r\n    }\r\n\r\n    // If the array is already sorted\r\n    if (left == n - 1) {\r\n        return 0;\r\n    }\r\n\r\n    // Find the right boundary of the unsorted subarray\r\n    while (right > 0 && arr[right] >= arr[right - 1]) {\r\n        right--;\r\n    }\r\n\r\n    // Find the minimum and maximum values within the unsorted subarray\r\n    int minVal = arr[left], maxVal = arr[left];\r\n    for (int i = left + 1; i <= right; i++) {\r\n        if (arr[i] < minVal) {\r\n            minVal = arr[i];\r\n        }\r\n        if (arr[i] > maxVal) {\r\n            maxVal = arr[i];\r\n        }\r\n    }\r\n\r\n    // Extend the left boundary to include elements greater than minVal\r\n    int leftIndex = 0;\r\n    while (leftIndex < left && arr[leftIndex] <= minVal) {\r\n        leftIndex++;\r\n    }\r\n\r\n    // Extend the right boundary to include elements smaller than maxVal\r\n    int rightIndex = n - 1;\r\n    while (rightIndex > right && arr[rightIndex] >= maxVal) {\r\n        rightIndex--;\r\n    }\r\n\r\n    // The length of the unsorted subarray\r\n    return rightIndex - leftIndex + 1;\r\n}","language":"c","time":"2025-07-21T17:49:32.341Z","isCorrect":true}]